#tag ClassProtected Class SpellCheckEditFieldInherits TextArea	#tag Event		Sub Close()		  raiseEvent Close		  Target = nil		  self.ReleaseSpellDocumentTag self.SpellDocTag		End Sub	#tag EndEvent	#tag Event		Sub GotFocus()		  SpellCheckEditField.Target = self		  raiseEvent GotFocus		End Sub	#tag EndEvent	#tag Event		Sub LostFocus()		  SpellCheckEditField.Target = nil		End Sub	#tag EndEvent	#tag Event		Sub Open()		  static monkeypatched as Boolean = MonkeypatchNSSpellChecker		  #pragma unused monkeypatched		  self.SpellDocTag = self.GetSpellDocumentTag		  raiseEvent Open		  		End Sub	#tag EndEvent	#tag MenuHandler		Function EditSpelling() As Boolean Handles EditSpelling.Action			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function SpellingCheckSpelling() As Boolean Handles SpellingCheckSpelling.Action			self.FindNextMisspelling			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function SpellingSpelling() As Boolean Handles SpellingSpelling.Action			self.FindNextMisspelling			self.UpdatePanel self.SelText			self.ShowPanel			return true		End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Sub FindNextMisspelling()		  #if TargetCarbon		    declare function checkSpellingOfString lib CocoaLib selector "checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:" (obj_id as Ptr, theText as CFStringRef, startOffset as Integer, language as Ptr, wrap as Boolean, tag as Integer, wordCount as Ptr) as NSRange		    		    dim theNSRange as NSRange = checkSpellingOfString(NSSpellChecker, self.Text, self.SelStart + self.SelLength, nil, true, self.SpellDocTag, nil)		    if theNSRange.length > 0 then		      me.SelStart = theNSRange.location		      me.SelLength = theNSRange.length		      me.ScrollPosition = me.LineNumAtCharPos(me.SelStart)		    else		      //		    end if		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function FPtr(p as Ptr) As Ptr		  //This function is a workaround for the inability to convert a Variant containing a delegate to Ptr:		  //dim v as Variant = AddressOf Foo		  //dim p as Ptr = v		  //results in a TypeMismatchException		  //So instead I do		  //dim v as Variant = FPtr(AddressOf Foo)		  //dim p as Ptr = v		  		  return p		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetSpellDocumentTag() As Integer		  #if targetCarbon		    declare function uniqueSpellDocumentTag lib CocoaLib selector "uniqueSpellDocumentTag" (class_id as Ptr) as Integer		    return uniqueSpellDocumentTag(NSClassFromString(NSSpellCheckerClassName))		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Ignore(word as String)		  #if targetCarbon		    declare sub ignoreWord lib CocoaLib selector "ignoreWord:inSpellDocumentWithTag:"  (obj_id as Ptr, wordToIgnore as CFStringRef, tag as Integer)		    		    ignoreWord(self.NSSpellChecker, word, self.SpellDocTag)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IgnoreList() As String()		  #if targetCarbon		    declare function ignoredWordsInSpellDocumentWithTag lib CocoaLib selector "ignoredWordsInSpellDocumentWithTag:" (obj_id as Ptr, tag as Integer) as Ptr		    declare function CFArrayGetCount Lib CarbonLib (theArray as Ptr) as Integer		    declare function CFArrayGetValueAtIndex Lib CarbonLib (theArray as Ptr, idx as Integer) as Ptr		    declare function  CFRetain lib CarbonLib (cf as Ptr) as CFStringRef		    		    dim theList() as String		    		    dim theArray as Ptr = ignoredWordsInSpellDocumentWithTag(NSSpellChecker, self.SpellDocTag)		    if theArray = nil then		      return theList		    end if		    		    dim lastOffset as Integer = CFArrayGetCount(theArray) - 1		    for offset as Integer = 0 to lastOffset		      theList.Append CFRetain(CFArrayGetValueAtIndex(theArray, offset))		    next		    return theList		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub impl_Correct(objectID as Ptr, selectorID as Ptr, sender as Ptr)		  #pragma unused objectID		  #pragma unused selectorID		  #pragma unused sender		  		  #if TargetCarbon		    if Target is nil then		      return		    end if		    		    declare function valueForKey lib CocoaLib selector "valueForKey:" (obj_id as Ptr, key as CFStringRef) as Ptr		    declare function stringValue lib CocoaLib selector "stringValue" (obj_id as Ptr) as Ptr		    declare function CFRetain lib CarbonLib (cf as Ptr) as CFStringRef		    		    		    dim textFieldRef as Ptr = valueForKey(NSSpellChecker, "wordField")		    if textFieldRef = nil then		      return		    end if		    		    Target.SelText = CFRetain(stringValue(textFieldRef))		    Target.FindNextMisspelling		    Target.UpdatePanel Target.SelText		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub impl_FindNext(objectID as Ptr, selectorID as Ptr, sender as Ptr)		  #pragma unused objectID		  #pragma unused selectorID		  #pragma unused sender		  		  if Target Is nil then		    return		  end if		  		  Target.FindNextMisspelling		  Target.UpdatePanel Target.SelText		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub impl_Ignore(objectID as Ptr, selectorID as Ptr, sender as Ptr)		  #pragma unused objectID		  #pragma unused selectorID		  #pragma unused sender		  		  if Target Is nil then		    return		  end if		  		  Target.Ignore Target.SelText		  Target.FindNextMisspelling		  Target.UpdatePanel Target.SelText		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function MonkeypatchNSSpellChecker() As Boolean		  #if targetCarbon		    declare function class_getInstanceMethod lib CocoaLib (aClass as Ptr, aSelector as Ptr) as Ptr		    declare function method_setImplementation lib CocoaLib (method as Ptr, imp as Ptr) as Ptr		    		    dim NSSpellCheckerClassRef as Ptr = NSClassFromString(NSSpellCheckerClassName)		    		    dim patchList() as Pair = Array("_correct:" : FPtr(AddressOf impl_Correct), _		    "_findNext:" : FPtr(AddressOf impl_FindNext), _		    "_ignore:" : FPtr(AddressOf impl_Ignore))		    		    for each item as Pair in patchList		      dim sel as Ptr = NSSelectorFromString(item.Left.StringValue)		      dim method as Ptr = class_getInstanceMethod(NSSpellCheckerClassRef,  sel)		      dim oldImp as Ptr = method_setImplementation(method, item.Right)		      #pragma unused oldImp		    next		    		    return true		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function NSSpellChecker() As Ptr		  #if TargetCarbon		    declare function sharedSpellChecker Lib CocoaLib selector "sharedSpellChecker" (class_id as Ptr) as Ptr		    		    return sharedSpellChecker(NSClassFromString(NSSpellCheckerClassName))		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub ReleaseSpellDocumentTag(tag as Integer)		  #if targetCarbon		    declare sub closeSpellDocumentWithTag lib CocoaLib selector "closeSpellDocumentWithTag:" (obj_id as Ptr, tag as Integer)		    		    closeSpellDocumentWithTag(NSSpellChecker, tag)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ShowPanel()		  #if TargetCarbon		    Declare Function objc_msgSend Lib CocoaLib (theReceiver as Integer, theSelector as Integer) as Integer		    Declare Sub objc_msgSend Lib CocoaLib (theReceiver as Integer, theSelector as Integer, param1 as Integer)		    		    declare function SpellingPanel lib CocoaLib selector "spellingPanel" (obj_id as Ptr) as Ptr		    declare sub OrderFront lib CocoaLib selector "orderFront:" (obj_id as Ptr, sender as Ptr)		    		    dim panelRef as Ptr = SpellingPanel(NSSpellChecker)		    if panelRef = nil then		      return		    end if		    OrderFront(panelRef, NSSpellChecker)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdatePanel(misspelledWord as String)		  #if TargetCarbon		    declare sub UpdatePanel lib CocoaLib selector "updateSpellingPanelWithMisspelledWord:" (obj_id as Ptr, misspelledWord as CFStringRef)		    		    UpdatePanel(NSSpellChecker, misspelledWord)		  #endif		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Close()	#tag EndHook	#tag Hook, Flags = &h0		Event GotFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Property, Flags = &h21		Private SpellDocTag As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Shared Target As SpellCheckEditField	#tag EndProperty	#tag Constant, Name = CarbonLib, Type = String, Dynamic = False, Default = \"Carbon.framework", Scope = Private	#tag EndConstant	#tag Constant, Name = NSSpellCheckerClassName, Type = String, Dynamic = False, Default = \"NSSpellChecker", Scope = Private	#tag EndConstant	#tag Structure, Name = NSRange, Flags = &h21		location as Integer		length as Integer	#tag EndStructure	#tag ViewBehavior		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Alignment"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="EditField"			#tag EnumValues				"0 - Default"				"1 - Left"				"2 - Center"				"3 - Right"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="BackColor"			Visible=true			Group="Appearance"			InitialValue="&hFFFFFF"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Format"			Visible=true			Group="Appearance"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="22"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LimitText"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Mask"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Multiline"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Password"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ReadOnly"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Styled"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Visible=true			Group="Initial State"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextColor"			Visible=true			Group="Appearance"			InitialValue="&h000000"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			EditorType="Enum"			InheritedFrom="EditField"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="80"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass